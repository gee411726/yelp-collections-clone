{"ast":null,"code":"export function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  geoLocateUser(google, map, infoWindow);\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i]);\n          }\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infoWindow.setContent(place.name || \"\");\n        infoWindow.open(map);\n      });\n    }\n  });\n\n  function geoLocateUser(google, map, infoWindow) {\n    const locationButton = document.createElement(\"button\");\n    locationButton.textContent = \"Pan to Current Location\";\n    locationButton.classList.add(\"custom-map-control-button\");\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton);\n    locationButton.addEventListener(\"click\", () => {\n      // Try HTML5 geolocation.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          infoWindow.setPosition(pos);\n          infoWindow.setContent(\"Your location\"); //infoWindow.open(map);\n\n          map.setCenter(pos);\n        }, () => {\n          handleLocationError(true, infoWindow, map.getCenter());\n        });\n      } else {\n        // Browser doesn't support Geolocation\n        handleLocationError(false, infoWindow, map.getCenter());\n      }\n    });\n\n    function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n      infoWindow.setPosition(pos);\n      infoWindow.setContent(browserHasGeolocation ? \"Error: The Geolocation service failed.\" : \"Error: Your browser doesn't support geolocation.\");\n      infoWindow.open(map);\n    }\n  }\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infoWindow = new google.maps.infoWindow();\n  const request = {\n    // turn into a state, use onChange -> \n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"]\n  };\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n\n  function createMarker(place) {\n    var infoWindow = new google.maps.infoWindow();\n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infoWindow.setContent(place.name || \"\");\n      infoWindow.open(map);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/src/utils/googleApiHelpers.js"],"names":["searchNearby","google","map","request","infoWindow","maps","InfoWindow","geoLocateUser","Promise","resolve","reject","service","places","PlacesService","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","length","createMarker","console","log","place","geometry","location","marker","Marker","position","event","addListener","setContent","name","open","locationButton","document","createElement","textContent","classList","add","controls","ControlPosition","TOP_RIGHT","push","addEventListener","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","setPosition","setCenter","handleLocationError","getCenter","browserHasGeolocation","getDetails","placeId","searchQuery","query","fields","findPlaceFromQuery"],"mappings":"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","sourcesContent":["export function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  geoLocateUser(google, map, infoWindow)\n\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i])\n          } \n        }\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location,\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infoWindow.setContent(place.name || \"\");\n        infoWindow.open(map);\n      });\n    }\n  });\n  function geoLocateUser(google, map, infoWindow) {\n\n    const locationButton = document.createElement(\"button\");\n    locationButton.textContent = \"Pan to Current Location\";\n    locationButton.classList.add(\"custom-map-control-button\");\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton);\n  \n    locationButton.addEventListener(\"click\", () => {\n      // Try HTML5 geolocation.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            };\n            infoWindow.setPosition(pos);\n            infoWindow.setContent(\"Your location\");\n            //infoWindow.open(map);\n            map.setCenter(pos);\n          },\n          () => {\n            handleLocationError(true, infoWindow, map.getCenter());\n          }\n        );\n      } else {\n        // Browser doesn't support Geolocation\n        handleLocationError(false, infoWindow, map.getCenter());\n      }\n    });\n\n    function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n      infoWindow.setPosition(pos);\n      infoWindow.setContent(\n        browserHasGeolocation\n          ? \"Error: The Geolocation service failed.\"\n          : \"Error: Your browser doesn't support geolocation.\"\n      );\n      infoWindow.open(map);\n    }\n  }\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}\n\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infoWindow = new google.maps.infoWindow();\n\n  const request = { // turn into a state, use onChange -> \n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"],\n  };\n\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n\n  function createMarker(place) {\n    var infoWindow = new google.maps.infoWindow();\n    \n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location,\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infoWindow.setContent(place.name || \"\");\n      infoWindow.open(map);\n    });\n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}