{"ast":null,"code":"export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n          console.log(results[i]);\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}\nexport function searchQuery(google, map, req) {\n  const service = new google.maps.places.PlacesService(map);\n  var infowindow = new google.maps.InfoWindow();\n  const request = {\n    query: \"Museum of Contemporary Art Australia\",\n    fields: [\"name\", \"geometry\"]\n  };\n}\n\nfunction createMarker(place) {\n  var infowindow = new google.maps.InfoWindow();\n  if (!place.geometry || !place.geometry.location) return;\n  const marker = new google.maps.Marker({\n    map,\n    position: place.geometry.location\n  });\n  google.maps.event.addListener(marker, \"click\", () => {\n    infowindow.setContent(place.name || \"\");\n    infowindow.open(map);\n  });\n}","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/src/utils/googleApiHelpers.js"],"names":["searchNearby","google","map","request","Promise","resolve","reject","service","maps","places","PlacesService","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","length","createMarker","console","log","getDetails","placeId","place","searchQuery","req","infowindow","InfoWindow","query","fields","geometry","location","marker","Marker","position","event","addListener","setContent","name","open"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;AACjD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,OAAO,GAAG,IAAIN,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBC,aAAvB,CAAqCR,GAArC,CAAhB;AAEAK,IAAAA,OAAO,CAACI,YAAR,CAAqBR,OAArB,EAA8B,CAACS,OAAD,EAAUC,MAAV,EAAkBC,UAAlB,KAAiC;AAC7D,UAAID,MAAM,IAAIZ,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBM,mBAAnB,CAAuCC,EAArD,EAAyD;AACvD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCE,UAAAA,YAAY,CAACP,OAAO,CAACK,CAAD,CAAR,CAAZ;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYT,OAAO,CAACK,CAAD,CAAnB;AACD;;AAEDZ,QAAAA,OAAO,CAACO,OAAD,EAAUE,UAAV,CAAP;AACD,OAPD,MAOO;AACLR,QAAAA,MAAM,CAACM,OAAD,EAAUC,MAAV,CAAN;AACD;AACF,KAXD;AAYD,GAfM,CAAP;AAgBD;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,UAAT,CAAoBrB,MAApB,EAA4BC,GAA5B,EAAiCqB,OAAjC,EAA0C;AAC/C,SAAO,IAAInB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,OAAO,GAAG,IAAIN,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBC,aAAvB,CAAqCR,GAArC,CAAhB;AAEA,UAAMC,OAAO,GAAG;AACdoB,MAAAA;AADc,KAAhB;AAIAhB,IAAAA,OAAO,CAACe,UAAR,CAAmBnB,OAAnB,EAA4B,CAACqB,KAAD,EAAQX,MAAR,KAAmB;AAC7C,UAAIA,MAAM,KAAKZ,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBM,mBAAnB,CAAuCC,EAAtD,EAA0D;AACxD,eAAOV,MAAM,CAACO,MAAD,CAAb;AACD,OAFD,MAEO;AACLR,QAAAA,OAAO,CAACmB,KAAD,CAAP;AACD;AACF,KAND;AAOD,GAdM,CAAP;AAeD;AAED,OAAO,SAASC,WAAT,CAAqBxB,MAArB,EAA6BC,GAA7B,EAAkCwB,GAAlC,EAAuC;AAC5C,QAAMnB,OAAO,GAAG,IAAIN,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBC,aAAvB,CAAqCR,GAArC,CAAhB;AACA,MAAIyB,UAAU,GAAG,IAAI1B,MAAM,CAACO,IAAP,CAAYoB,UAAhB,EAAjB;AAEA,QAAMzB,OAAO,GAAG;AACd0B,IAAAA,KAAK,EAAE,sCADO;AAEdC,IAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,UAAT;AAFM,GAAhB;AAID;;AAGD,SAASX,YAAT,CAAsBK,KAAtB,EAA6B;AAC3B,MAAIG,UAAU,GAAG,IAAI1B,MAAM,CAACO,IAAP,CAAYoB,UAAhB,EAAjB;AAEA,MAAI,CAACJ,KAAK,CAACO,QAAP,IAAmB,CAACP,KAAK,CAACO,QAAN,CAAeC,QAAvC,EAAiD;AACjD,QAAMC,MAAM,GAAG,IAAIhC,MAAM,CAACO,IAAP,CAAY0B,MAAhB,CAAuB;AACpChC,IAAAA,GADoC;AAEpCiC,IAAAA,QAAQ,EAAEX,KAAK,CAACO,QAAN,CAAeC;AAFW,GAAvB,CAAf;AAIA/B,EAAAA,MAAM,CAACO,IAAP,CAAY4B,KAAZ,CAAkBC,WAAlB,CAA8BJ,MAA9B,EAAsC,OAAtC,EAA+C,MAAM;AACnDN,IAAAA,UAAU,CAACW,UAAX,CAAsBd,KAAK,CAACe,IAAN,IAAc,EAApC;AACAZ,IAAAA,UAAU,CAACa,IAAX,CAAgBtC,GAAhB;AACD,GAHD;AAID","sourcesContent":["export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n          console.log(results[i])\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}\n\nexport function searchQuery(google, map, req) {\n  const service = new google.maps.places.PlacesService(map);\n  var infowindow = new google.maps.InfoWindow();\n\n  const request = {\n    query: \"Museum of Contemporary Art Australia\",\n    fields: [\"name\", \"geometry\"],\n  };\n}\n\n\nfunction createMarker(place) {\n  var infowindow = new google.maps.InfoWindow();\n\n  if (!place.geometry || !place.geometry.location) return;\n  const marker = new google.maps.Marker({\n    map,\n    position: place.geometry.location,\n  });\n  google.maps.event.addListener(marker, \"click\", () => {\n    infowindow.setContent(place.name || \"\");\n    infowindow.open(map);\n  });\n}"]},"metadata":{},"sourceType":"module"}