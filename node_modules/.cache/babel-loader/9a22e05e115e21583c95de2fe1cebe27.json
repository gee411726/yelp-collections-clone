{"ast":null,"code":"export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infowindow.setContent(place.name || \"\");\n        infowindow.open(map);\n      });\n    }\n\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n          console.log(results[i]);\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infowindow = new google.maps.InfoWindow();\n  const request = {\n    query: \"Museum of Contemporary Art Australia\",\n    fields: [\"name\", \"geometry\"]\n  };\n\n  function createMarker(place) {\n    var infowindow = new google.maps.InfoWindow();\n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infowindow.setContent(place.name || \"\");\n      infowindow.open(map);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/src/utils/googleApiHelpers.js"],"names":["searchNearby","google","map","request","Promise","resolve","reject","service","maps","places","PlacesService","createMarker","place","geometry","location","marker","Marker","position","event","addListener","infowindow","setContent","name","open","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","length","console","log","getDetails","placeId","searchQuery","InfoWindow","query","fields"],"mappings":"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","sourcesContent":["export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location,\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infowindow.setContent(place.name || \"\");\n        infowindow.open(map);\n      });\n    }\n\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n          console.log(results[i])\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}\n\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infowindow = new google.maps.InfoWindow();\n\n\n  const request = {\n    query: \"Museum of Contemporary Art Australia\",\n    fields: [\"name\", \"geometry\"],\n  };\n\n\n  function createMarker(place) {\n    var infowindow = new google.maps.InfoWindow();\n    \n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location,\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infowindow.setContent(place.name || \"\");\n      infowindow.open(map);\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}