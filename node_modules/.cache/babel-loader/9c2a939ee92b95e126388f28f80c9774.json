{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bgee/Desktop/Web App Projects/yelp-collections-clone-project/src/utils/googleApiHelpers.js\";\nimport ReactDOMServer from 'react-dom/server';\nexport function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  initAutocomplete(google, map, infoWindow);\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < 10; i++) {\n          createMarker(google, map, results[i]);\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n  });\n}\nexport function initAutocomplete(google, map) {\n  const input = document.getElementById(\"pac-input\");\n  const searchBox = new google.maps.places.SearchBox(input);\n  map.controls[google.maps.ControlPosition.TOP_CENTER].push(input); // Bias the SearchBox results towards current map's viewport.\n\n  map.addListener(\"bounds_changed\", () => {\n    searchBox.setBounds(map.getBounds());\n    google.maps.event.trigger(map, 'resize');\n  });\n  let markers = []; // Listen for the event fired when the user selects a prediction and retrieve\n  // more details for that place.\n\n  searchBox.addListener(\"places_changed\", () => {\n    const places = searchBox.getPlaces();\n\n    if (places.length === 0) {\n      return;\n    } // Clear out the old markers.\n\n\n    markers.forEach(marker => {\n      marker.setMap(null);\n    });\n    markers = []; // For each place, get the icon, name and location.\n\n    const bounds = new google.maps.LatLngBounds();\n\n    for (let i = 0; i < places.length; i++) {\n      var place = places[i];\n      console.log(place);\n\n      if (!place.geometry || !place.geometry.location) {\n        console.log(\"Returned place contains no geometry\");\n        return;\n      } // Create a marker for each place.\n\n\n      createMarker(google, map, place);\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport.\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    }\n\n    map.fitBounds(bounds);\n  });\n}\nexport function createMarkers(google, map, places, collectionsList) {\n  if (!places || places.length === 0) {\n    return;\n  } else {\n    //create empty LatLngBounds object   \n    var bounds = new google.maps.LatLngBounds();\n\n    for (var i = 0; i < places.length; i++) {\n      createMarker(google, map, places[i], collectionsList);\n\n      if (places[i].location) {\n        if (!isNaN(places[i].location.lat && !isNaN(places[i].location.lng))) {\n          bounds.extend(new google.maps.LatLng(places[i].location));\n        }\n      }\n    } //now fit the map to the newly inclusive bounds\n\n\n    map.fitBounds(bounds); //(optional) restore the zoom level after the map is done scaling\n\n    var listener = google.maps.event.addListener(map, \"idle\", function () {\n      map.setZoom(13);\n      google.maps.event.removeListener(listener);\n    });\n  }\n}\nexport function createMarker(google, map, place, collectionsList) {\n  var position;\n\n  if (!place.geometry) {\n    if (!place.location) {\n      return;\n    }\n\n    position = {\n      lat: place.lat,\n      lng: place.lng\n    };\n    console.log(\"Place.location\", position);\n  } else {\n    position = place.geometry.location;\n    console.log(place);\n  } //if (!place.geometry || !place.geometry.location) return;\n\n\n  var marker = new google.maps.Marker({\n    map,\n    position: position\n  });\n  google.maps.event.addListener(marker, \"click\", function () {\n    return function () {\n      marker.infoWindow = new google.maps.InfoWindow();\n      var html = ReactDOMServer.renderToStaticMarkup(searchDetails(place, collectionsList));\n      map.panTo(marker.getPosition());\n      marker.infoWindow.setContent(html);\n      marker.infoWindow.open(map, marker);\n    }(marker);\n  });\n  return {\n    position: position\n  };\n}\nexport function searchDetails(place, collections) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(\"place info in search Details: \", place), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Place Name: \", place.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Address: \", place.formatted_address]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Website: \", place.website]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Copy info below and paste in \\\"Add to Place Collection\\\" tab to add to your collection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Place_id: \", place.place_id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Location (Lat, Lng): \", \"{lat: \", place.geometry.location.lat(), \", lng: \", place.geometry.location.lng(), \"}\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\nexport function geoLocateUser(google, map) {\n  var infoWindow = new google.maps.InfoWindow();\n  const locationButton = document.createElement(\"button\");\n  locationButton.textContent = \"Pan to Current Location\";\n  locationButton.classList.add(\"custom-map-control-button\");\n  map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);\n  locationButton.addEventListener(\"click\", () => {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        infoWindow.setPosition(pos);\n        infoWindow.setContent(\"Your location\"); //infoWindow.open(map);\n\n        map.setCenter(pos);\n      }, () => {\n        handleLocationError(true, infoWindow, map.getCenter());\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  });\n\n  function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(browserHasGeolocation ? \"Error: The Geolocation service failed.\" : \"Error: Your browser doesn't support geolocation.\");\n    infoWindow.open(map);\n  }\n}\n/*\n * getDetails\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId: placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        console.log(\"status!== OK in getDetails. Request is here: \", request);\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/yelp-collections-clone-project/src/utils/googleApiHelpers.js"],"names":["ReactDOMServer","searchNearby","google","map","request","infoWindow","maps","InfoWindow","initAutocomplete","Promise","resolve","reject","service","places","PlacesService","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","createMarker","input","document","getElementById","searchBox","SearchBox","controls","ControlPosition","TOP_CENTER","push","addListener","setBounds","getBounds","event","trigger","markers","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","console","log","geometry","location","viewport","union","extend","fitBounds","createMarkers","collectionsList","isNaN","lat","lng","LatLng","listener","setZoom","removeListener","position","Marker","html","renderToStaticMarkup","searchDetails","panTo","getPosition","setContent","open","collections","name","formatted_address","website","place_id","geoLocateUser","locationButton","createElement","textContent","classList","add","addEventListener","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setPosition","setCenter","handleLocationError","getCenter","browserHasGeolocation","getDetails","placeId"],"mappings":"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","sourcesContent":["import ReactDOMServer from 'react-dom/server';\n\nexport function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  initAutocomplete(google, map, infoWindow)\n\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < 10; i++) {\n          createMarker(google, map, results[i]);\n        }\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n  });\n\n\n\n}\n\n\n\nexport function initAutocomplete(google, map) {\n  const input = document.getElementById(\"pac-input\")\n  const searchBox = new google.maps.places.SearchBox(input);\n  map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);\n\n  // Bias the SearchBox results towards current map's viewport.\n  map.addListener(\"bounds_changed\", () => {\n    searchBox.setBounds(map.getBounds());\n    google.maps.event.trigger(map, 'resize')\n  });\n  let markers = [];\n  // Listen for the event fired when the user selects a prediction and retrieve\n  // more details for that place.\n  searchBox.addListener(\"places_changed\", () => {\n    const places = searchBox.getPlaces();\n\n    if (places.length === 0) {\n      return;\n    }\n    // Clear out the old markers.\n    markers.forEach((marker) => {\n      marker.setMap(null);\n    });\n    markers = [];\n    // For each place, get the icon, name and location.\n    const bounds = new google.maps.LatLngBounds();\n\n    for (let i = 0; i < places.length; i++) {\n      var place = places[i];\n      console.log(place)\n        if (!place.geometry || !place.geometry.location) {\n          console.log(\"Returned place contains no geometry\");\n          return;\n        }\n        // Create a marker for each place.\n        createMarker(google, map, place);\n  \n        if (place.geometry.viewport) {\n          // Only geocodes have viewport.\n          bounds.union(place.geometry.viewport);\n        } else {\n          bounds.extend(place.geometry.location);\n        }\n    }\n    map.fitBounds(bounds);\n  });\n}\n\n\n\n\n\n\nexport function createMarkers(google, map, places, collectionsList) {\n\n  if (!places || places.length === 0) {\n    return\n  } else {\n    //create empty LatLngBounds object   \n    var bounds = new google.maps.LatLngBounds();\n    for (var i = 0; i < places.length; i++) {\n      createMarker(google, map, places[i], collectionsList)\n      if (places[i].location) {\n        if (!isNaN(places[i].location.lat && !isNaN(places[i].location.lng))) {\n          bounds.extend(new google.maps.LatLng(places[i].location));\n        }\n      }  \n    }\n    //now fit the map to the newly inclusive bounds\n    map.fitBounds(bounds);\n  \n    //(optional) restore the zoom level after the map is done scaling\n    var listener = google.maps.event.addListener(map, \"idle\", function () {\n        map.setZoom(13);\n        google.maps.event.removeListener(listener);\n    });\n  }\n    \n}\n\n\nexport function createMarker(google, map, place, collectionsList) {\n  var position;\n\n  if (!place.geometry) {\n    if (!place.location) {\n      return\n    }\n    position = {\n      lat: place.lat,\n      lng: place.lng\n    }\n    console.log(\"Place.location\", position)\n  } else {\n    position = place.geometry.location;\n    console.log(place)\n  }\n\n  //if (!place.geometry || !place.geometry.location) return;\n\n  var marker = new google.maps.Marker({\n    map,\n    position: position\n  });\n  \n\n  google.maps.event.addListener(marker, \"click\", (function() {\n    return function() {\n      marker.infoWindow = new google.maps.InfoWindow();\n      var html = ReactDOMServer.renderToStaticMarkup(searchDetails(place, collectionsList));\n      map.panTo(marker.getPosition());\n      marker.infoWindow.setContent(html);\n      marker.infoWindow.open(map, marker);\n    }(marker);\n  }))\n\n  return {\n    position: position\n  };\n}\n\nexport function searchDetails(place, collections) {\n  return (\n    <div>\n      {console.log(\"place info in search Details: \", place)}\n      <div>Place Name: {place.name}</div>\n      <div>Address: {place.formatted_address}</div>\n      <div>Website: {place.website}</div><br/>\n      <div>Copy info below and paste in \"Add to Place Collection\" tab to add to your collection</div>\n      <div>Place_id: {place.place_id}</div>\n      <div>Location (Lat, Lng): {\"{lat: \"}{place.geometry.location.lat()}, lng: {place.geometry.location.lng()}{\"}\"}</div>\n    </div>\n  )\n}\n\n\nexport function geoLocateUser(google, map) {\n  var infoWindow = new google.maps.InfoWindow();\n\n  const locationButton = document.createElement(\"button\");\n  locationButton.textContent = \"Pan to Current Location\"; \n  locationButton.classList.add(\"custom-map-control-button\");\n  map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);\n\n  locationButton.addEventListener(\"click\", () => {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          };\n          infoWindow.setPosition(pos);\n          infoWindow.setContent(\"Your location\");\n          //infoWindow.open(map);\n          map.setCenter(pos);\n        },\n        () => {\n          handleLocationError(true, infoWindow, map.getCenter());\n        }\n      );\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  });\n\n  function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(\n      browserHasGeolocation\n        ? \"Error: The Geolocation service failed.\"\n        : \"Error: Your browser doesn't support geolocation.\"\n    );\n    infoWindow.open(map);\n  }\n}\n\n\n\n/*\n * getDetails\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId: placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        console.log(\"status!== OK in getDetails. Request is here: \", request)\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}