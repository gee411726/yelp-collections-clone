{"ast":null,"code":"export function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  geoLocateUser(google, map, infoWindow);\n  initAutocomplete(google, map, infoWindow);\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i]);\n          }\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infoWindow.setContent(place.name || \"\");\n        infoWindow.open(map);\n      });\n    }\n  });\n}\nexport function initAutocomplete(google, map) {\n  const input = document.getElementById(\"pac-input\");\n  const searchBox = new google.maps.places.SearchBox(input);\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input); // Bias the SearchBox results towards current map's viewport.\n\n  map.addListener(\"bounds_changed\", () => {\n    searchBox.setBounds(map.getBounds());\n    google.maps.event.trigger(map, 'resize');\n  });\n  let markers = []; // Listen for the event fired when the user selects a prediction and retrieve\n  // more details for that place.\n\n  searchBox.addListener(\"places_changed\", () => {\n    const places = searchBox.getPlaces();\n\n    if (places.length == 0) {\n      return;\n    } // Clear out the old markers.\n\n\n    markers.forEach(marker => {\n      marker.setMap(null);\n    });\n    markers = []; // For each place, get the icon, name and location.\n\n    const bounds = new google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (!place.geometry || !place.geometry.location) {\n        console.log(\"Returned place contains no geometry\");\n        return;\n      }\n\n      const icon = {\n        url: place.icon,\n        size: new google.maps.Size(71, 71),\n        origin: new google.maps.Point(0, 0),\n        anchor: new google.maps.Point(17, 34),\n        scaledSize: new google.maps.Size(25, 25)\n      }; // Create a marker for each place.\n\n      markers.push(new google.maps.Marker({\n        map,\n        icon,\n        title: place.name,\n        position: place.geometry.location\n      }));\n\n      if (markers.length > 0) {\n        for (let i = 0; i < markers.length; i++) {\n          createMarker(markers[i]);\n        }\n\n        console.log(markers); //map.setCenter(markers[0].geometry.location);\n      }\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport.\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    map.fitBounds(bounds);\n  });\n\n  function createMarker(place) {\n    var infoWindow = new google.maps.InfoWindow();\n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infoWindow.setContent(place.name || \"\");\n      infoWindow.open(map);\n    });\n  }\n}\nexport function geoLocateUser(google, map) {\n  var infoWindow = new google.maps.InfoWindow();\n  const locationButton = document.createElement(\"button\");\n  locationButton.textContent = \"Pan to Current Location\";\n  locationButton.classList.add(\"custom-map-control-button\");\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton);\n  locationButton.addEventListener(\"click\", () => {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        infoWindow.setPosition(pos);\n        infoWindow.setContent(\"Your location\"); //infoWindow.open(map);\n\n        map.setCenter(pos);\n      }, () => {\n        handleLocationError(true, infoWindow, map.getCenter());\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  });\n\n  function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(browserHasGeolocation ? \"Error: The Geolocation service failed.\" : \"Error: Your browser doesn't support geolocation.\");\n    infoWindow.open(map);\n  }\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}\n/*\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infoWindow = new google.maps.infoWindow();\n\n  const request = { // turn into a state, use onChange -> \n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"],\n  };\n\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n}\n*/\n// This example adds a search box to a map, using the Google Place Autocomplete\n// feature. People can enter geographical searches. The search box will return a\n// pick list containing a mix of places and predicted search terms.\n// This example requires the Places library. Include the libraries=places\n// parameter when you first load the API. For example:\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/src/utils/googleApiHelpers.js"],"names":["searchNearby","google","map","request","infoWindow","maps","InfoWindow","geoLocateUser","initAutocomplete","Promise","resolve","reject","service","places","PlacesService","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","length","createMarker","console","log","place","geometry","location","marker","Marker","position","event","addListener","setContent","name","open","input","document","getElementById","searchBox","SearchBox","controls","ControlPosition","TOP_LEFT","push","setBounds","getBounds","trigger","markers","getPlaces","forEach","setMap","bounds","LatLngBounds","icon","url","size","Size","origin","Point","anchor","scaledSize","title","viewport","union","extend","fitBounds","locationButton","createElement","textContent","classList","add","TOP_RIGHT","addEventListener","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","setPosition","setCenter","handleLocationError","getCenter","browserHasGeolocation","getDetails","placeId"],"mappings":"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","sourcesContent":["export function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  geoLocateUser(google, map, infoWindow)\n  initAutocomplete(google, map, infoWindow)\n\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i])\n          } \n        }\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location,\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infoWindow.setContent(place.name || \"\");\n        infoWindow.open(map);\n      });\n    }\n  });\n}\n\nexport function initAutocomplete(google, map) {\n\n  const input = document.getElementById(\"pac-input\")\n  const searchBox = new google.maps.places.SearchBox(input);\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n  // Bias the SearchBox results towards current map's viewport.\n  map.addListener(\"bounds_changed\", () => {\n    searchBox.setBounds(map.getBounds());\n    google.maps.event.trigger(map, 'resize')\n  });\n  let markers = [];\n  // Listen for the event fired when the user selects a prediction and retrieve\n  // more details for that place.\n  searchBox.addListener(\"places_changed\", () => {\n    const places = searchBox.getPlaces();\n\n    if (places.length == 0) {\n      return;\n    }\n    // Clear out the old markers.\n    markers.forEach((marker) => {\n      marker.setMap(null);\n    });\n    markers = [];\n    // For each place, get the icon, name and location.\n    const bounds = new google.maps.LatLngBounds();\n    places.forEach((place) => {\n      if (!place.geometry || !place.geometry.location) {\n        console.log(\"Returned place contains no geometry\");\n        return;\n      }\n      const icon = {\n        url: place.icon,\n        size: new google.maps.Size(71, 71),\n        origin: new google.maps.Point(0, 0),\n        anchor: new google.maps.Point(17, 34),\n        scaledSize: new google.maps.Size(25, 25),\n      };\n      // Create a marker for each place.\n      markers.push(\n        new google.maps.Marker({\n          map,\n          icon,\n          title: place.name,\n          position: place.geometry.location,\n        })\n      );\n\n      if (markers.length > 0) {\n        for (let i = 0; i < markers.length; i++) {\n          createMarker(markers[i]);\n        }\n        console.log(markers)\n        //map.setCenter(markers[0].geometry.location);\n      }\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport.\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    map.fitBounds(bounds);\n  });\n\n  function createMarker(place) {\n    var infoWindow = new google.maps.InfoWindow();\n    \n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location,\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infoWindow.setContent(place.name || \"\");\n      infoWindow.open(map);\n    });\n  }\n\n\n}\n\nexport function geoLocateUser(google, map) {\n  var infoWindow = new google.maps.InfoWindow();\n\n  const locationButton = document.createElement(\"button\");\n  locationButton.textContent = \"Pan to Current Location\";\n  locationButton.classList.add(\"custom-map-control-button\");\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton);\n\n  locationButton.addEventListener(\"click\", () => {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          };\n          infoWindow.setPosition(pos);\n          infoWindow.setContent(\"Your location\");\n          //infoWindow.open(map);\n          map.setCenter(pos);\n        },\n        () => {\n          handleLocationError(true, infoWindow, map.getCenter());\n        }\n      );\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  });\n\n  function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(\n      browserHasGeolocation\n        ? \"Error: The Geolocation service failed.\"\n        : \"Error: Your browser doesn't support geolocation.\"\n    );\n    infoWindow.open(map);\n  }\n}\n\n\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}\n/*\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infoWindow = new google.maps.infoWindow();\n\n  const request = { // turn into a state, use onChange -> \n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"],\n  };\n\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n}\n*/\n\n// This example adds a search box to a map, using the Google Place Autocomplete\n// feature. People can enter geographical searches. The search box will return a\n// pick list containing a mix of places and predicted search terms.\n// This example requires the Places library. Include the libraries=places\n// parameter when you first load the API. For example:\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}