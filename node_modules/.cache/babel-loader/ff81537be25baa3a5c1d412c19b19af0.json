{"ast":null,"code":"export function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  geoLocateUser(google, map, infoWindow);\n  initAutocomplete(google, map, infoWindow);\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i]);\n          }\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infoWindow.setContent(place.name || \"\");\n        infoWindow.open(map);\n      });\n    }\n  });\n\n  function geoLocateUser(google, map, infoWindow) {\n    const locationButton = document.createElement(\"button\");\n    locationButton.textContent = \"Pan to Current Location\";\n    locationButton.classList.add(\"custom-map-control-button\");\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton);\n    locationButton.addEventListener(\"click\", () => {\n      // Try HTML5 geolocation.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          infoWindow.setPosition(pos);\n          infoWindow.setContent(\"Your location\"); //infoWindow.open(map);\n\n          map.setCenter(pos);\n        }, () => {\n          handleLocationError(true, infoWindow, map.getCenter());\n        });\n      } else {\n        // Browser doesn't support Geolocation\n        handleLocationError(false, infoWindow, map.getCenter());\n      }\n    });\n\n    function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n      infoWindow.setPosition(pos);\n      infoWindow.setContent(browserHasGeolocation ? \"Error: The Geolocation service failed.\" : \"Error: Your browser doesn't support geolocation.\");\n      infoWindow.open(map);\n    }\n  }\n\n  function initAutocomplete(google, map, infoWindow) {\n    const input = document.getElementById(\"pac-input\");\n    const searchBox = new google.maps.places.SearchBox(input);\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input); // Bias the SearchBox results towards current map's viewport.\n\n    map.addListener(\"bounds_changed\", () => {\n      searchBox.setBounds(map.getBounds());\n    });\n    let markers = []; // Listen for the event fired when the user selects a prediction and retrieve\n    // more details for that place.\n\n    searchBox.addListener(\"places_changed\", () => {\n      const places = searchBox.getPlaces();\n\n      if (places.length == 0) {\n        return;\n      } // Clear out the old markers.\n\n\n      markers.forEach(marker => {\n        marker.setMap(null);\n      });\n      markers = []; // For each place, get the icon, name and location.\n\n      const bounds = new google.maps.LatLngBounds();\n      places.forEach(place => {\n        if (!place.geometry || !place.geometry.location) {\n          console.log(\"Returned place contains no geometry\");\n          return;\n        }\n\n        const icon = {\n          url: place.icon,\n          size: new google.maps.Size(71, 71),\n          origin: new google.maps.Point(0, 0),\n          anchor: new google.maps.Point(17, 34),\n          scaledSize: new google.maps.Size(25, 25)\n        }; // Create a marker for each place.\n\n        markers.push(new google.maps.Marker({\n          map,\n          icon,\n          title: place.name,\n          position: place.geometry.location\n        }));\n\n        if (place.geometry.viewport) {\n          // Only geocodes have viewport.\n          bounds.union(place.geometry.viewport);\n        } else {\n          bounds.extend(place.geometry.location);\n        }\n      });\n      map.fitBounds(bounds);\n    });\n  }\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infoWindow = new google.maps.infoWindow();\n  const request = {\n    // turn into a state, use onChange -> \n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"]\n  };\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n\n  function createMarker(place) {\n    var infoWindow = new google.maps.infoWindow();\n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infoWindow.setContent(place.name || \"\");\n      infoWindow.open(map);\n    });\n  }\n} // This example adds a search box to a map, using the Google Place Autocomplete\n// feature. People can enter geographical searches. The search box will return a\n// pick list containing a mix of places and predicted search terms.\n// This example requires the Places library. Include the libraries=places\n// parameter when you first load the API. For example:\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/src/utils/googleApiHelpers.js"],"names":["searchNearby","google","map","request","infoWindow","maps","InfoWindow","geoLocateUser","initAutocomplete","Promise","resolve","reject","service","places","PlacesService","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","length","createMarker","console","log","place","geometry","location","marker","Marker","position","event","addListener","setContent","name","open","locationButton","document","createElement","textContent","classList","add","controls","ControlPosition","TOP_RIGHT","push","addEventListener","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","setPosition","setCenter","handleLocationError","getCenter","browserHasGeolocation","input","getElementById","searchBox","SearchBox","TOP_LEFT","setBounds","getBounds","markers","getPlaces","forEach","setMap","bounds","LatLngBounds","icon","url","size","Size","origin","Point","anchor","scaledSize","title","viewport","union","extend","fitBounds","getDetails","placeId","searchQuery","query","fields","findPlaceFromQuery"],"mappings":"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","sourcesContent":["export function searchNearby(google, map, request) {\n  var infoWindow = new google.maps.InfoWindow();\n  geoLocateUser(google, map, infoWindow)\n  initAutocomplete(google, map, infoWindow)\n\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i])\n          } \n        }\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location,\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infoWindow.setContent(place.name || \"\");\n        infoWindow.open(map);\n      });\n    }\n  });\n\n\n  function geoLocateUser(google, map, infoWindow) {\n\n    const locationButton = document.createElement(\"button\");\n    locationButton.textContent = \"Pan to Current Location\";\n    locationButton.classList.add(\"custom-map-control-button\");\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton);\n  \n    locationButton.addEventListener(\"click\", () => {\n      // Try HTML5 geolocation.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            };\n            infoWindow.setPosition(pos);\n            infoWindow.setContent(\"Your location\");\n            //infoWindow.open(map);\n            map.setCenter(pos);\n          },\n          () => {\n            handleLocationError(true, infoWindow, map.getCenter());\n          }\n        );\n      } else {\n        // Browser doesn't support Geolocation\n        handleLocationError(false, infoWindow, map.getCenter());\n      }\n    });\n\n    function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n      infoWindow.setPosition(pos);\n      infoWindow.setContent(\n        browserHasGeolocation\n          ? \"Error: The Geolocation service failed.\"\n          : \"Error: Your browser doesn't support geolocation.\"\n      );\n      infoWindow.open(map);\n    }\n  }\n\n  function initAutocomplete(google, map, infoWindow) {\n    const input = document.getElementById(\"pac-input\")\n    const searchBox = new google.maps.places.SearchBox(input);\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n    // Bias the SearchBox results towards current map's viewport.\n    map.addListener(\"bounds_changed\", () => {\n      searchBox.setBounds(map.getBounds());\n    });\n    let markers = [];\n    // Listen for the event fired when the user selects a prediction and retrieve\n    // more details for that place.\n    searchBox.addListener(\"places_changed\", () => {\n      const places = searchBox.getPlaces();\n  \n      if (places.length == 0) {\n        return;\n      }\n      // Clear out the old markers.\n      markers.forEach((marker) => {\n        marker.setMap(null);\n      });\n      markers = [];\n      // For each place, get the icon, name and location.\n      const bounds = new google.maps.LatLngBounds();\n      places.forEach((place) => {\n        if (!place.geometry || !place.geometry.location) {\n          console.log(\"Returned place contains no geometry\");\n          return;\n        }\n        const icon = {\n          url: place.icon,\n          size: new google.maps.Size(71, 71),\n          origin: new google.maps.Point(0, 0),\n          anchor: new google.maps.Point(17, 34),\n          scaledSize: new google.maps.Size(25, 25),\n        };\n        // Create a marker for each place.\n        markers.push(\n          new google.maps.Marker({\n            map,\n            icon,\n            title: place.name,\n            position: place.geometry.location,\n          })\n        );\n  \n        if (place.geometry.viewport) {\n          // Only geocodes have viewport.\n          bounds.union(place.geometry.viewport);\n        } else {\n          bounds.extend(place.geometry.location);\n        }\n      });\n      map.fitBounds(bounds);\n    });\n  }\n\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}\n\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infoWindow = new google.maps.infoWindow();\n\n  const request = { // turn into a state, use onChange -> \n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"],\n  };\n\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n\n  function createMarker(place) {\n    var infoWindow = new google.maps.infoWindow();\n    \n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location,\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infoWindow.setContent(place.name || \"\");\n      infoWindow.open(map);\n    });\n  }\n}\n\n// This example adds a search box to a map, using the Google Place Autocomplete\n// feature. People can enter geographical searches. The search box will return a\n// pick list containing a mix of places and predicted search terms.\n// This example requires the Places library. Include the libraries=places\n// parameter when you first load the API. For example:\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}