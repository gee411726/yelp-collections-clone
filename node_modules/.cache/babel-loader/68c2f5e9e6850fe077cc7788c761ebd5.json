{"ast":null,"code":"const Rx = require('rxjs');\n\nmodule.exports = class Command {\n  get killable() {\n    return !!this.process;\n  }\n\n  constructor({\n    index,\n    name,\n    command,\n    prefixColor,\n    env,\n    killProcess,\n    spawn,\n    spawnOpts\n  }) {\n    this.index = index;\n    this.name = name;\n    this.command = command;\n    this.prefixColor = prefixColor;\n    this.env = env;\n    this.killProcess = killProcess;\n    this.spawn = spawn;\n    this.spawnOpts = spawnOpts;\n    this.error = new Rx.Subject();\n    this.close = new Rx.Subject();\n    this.stdout = new Rx.Subject();\n    this.stderr = new Rx.Subject();\n  }\n\n  start() {\n    const child = this.spawn(this.command, this.spawnOpts);\n    this.process = child;\n    this.pid = child.pid;\n    Rx.fromEvent(child, 'error').subscribe(event => {\n      this.process = undefined;\n      this.error.next(event);\n    });\n    Rx.fromEvent(child, 'close').subscribe(([exitCode, signal]) => {\n      this.process = undefined;\n      this.close.next({\n        command: {\n          command: this.command,\n          name: this.name,\n          prefixColor: this.prefixColor,\n          env: this.env\n        },\n        index: this.index,\n        exitCode: exitCode === null ? signal : exitCode\n      });\n    });\n    child.stdout && pipeTo(Rx.fromEvent(child.stdout, 'data'), this.stdout);\n    child.stderr && pipeTo(Rx.fromEvent(child.stderr, 'data'), this.stderr);\n    this.stdin = child.stdin;\n  }\n\n  kill(code) {\n    if (this.killable) {\n      this.killProcess(this.pid, code);\n    }\n  }\n\n};\n\nfunction pipeTo(stream, subject) {\n  stream.subscribe(event => subject.next(event));\n}","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/node_modules/concurrently/src/command.js"],"names":["Rx","require","module","exports","Command","killable","process","constructor","index","name","command","prefixColor","env","killProcess","spawn","spawnOpts","error","Subject","close","stdout","stderr","start","child","pid","fromEvent","subscribe","event","undefined","next","exitCode","signal","pipeTo","stdin","kill","code","stream","subject"],"mappings":"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","sourcesContent":["const Rx = require('rxjs');\n\nmodule.exports = class Command {\n    get killable() {\n        return !!this.process;\n    }\n\n    constructor({ index, name, command, prefixColor, env, killProcess, spawn, spawnOpts }) {\n        this.index = index;\n        this.name = name;\n        this.command = command;\n        this.prefixColor = prefixColor;\n        this.env = env;\n        this.killProcess = killProcess;\n        this.spawn = spawn;\n        this.spawnOpts = spawnOpts;\n\n        this.error = new Rx.Subject();\n        this.close = new Rx.Subject();\n        this.stdout = new Rx.Subject();\n        this.stderr = new Rx.Subject();\n    }\n\n    start() {\n        const child = this.spawn(this.command, this.spawnOpts);\n        this.process = child;\n        this.pid = child.pid;\n\n        Rx.fromEvent(child, 'error').subscribe(event => {\n            this.process = undefined;\n            this.error.next(event);\n        });\n        Rx.fromEvent(child, 'close').subscribe(([exitCode, signal]) => {\n            this.process = undefined;\n            this.close.next({\n                command: {\n                    command: this.command,\n                    name: this.name,\n                    prefixColor: this.prefixColor,\n                    env: this.env,\n                },\n                index: this.index,\n                exitCode: exitCode === null ? signal : exitCode,\n            });\n        });\n        child.stdout && pipeTo(Rx.fromEvent(child.stdout, 'data'), this.stdout);\n        child.stderr && pipeTo(Rx.fromEvent(child.stderr, 'data'), this.stderr);\n        this.stdin = child.stdin;\n    }\n\n    kill(code) {\n        if (this.killable) {\n            this.killProcess(this.pid, code);\n        }\n    }\n};\n\nfunction pipeTo(stream, subject) {\n    stream.subscribe(event => subject.next(event));\n}\n"]},"metadata":{},"sourceType":"script"}