{"ast":null,"code":"export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    infowindow = new google.maps.InfoWindow();\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infowindow.setContent(place.name || \"\");\n        infowindow.open(map);\n      });\n    }\n\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/src/utils/googleApiHelpers.js"],"names":["searchNearby","google","map","request","Promise","resolve","reject","service","maps","places","PlacesService","infowindow","InfoWindow","createMarker","place","geometry","location","marker","Marker","position","event","addListener","setContent","name","open","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","length","getDetails","placeId"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;AACjD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,OAAO,GAAG,IAAIN,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBC,aAAvB,CAAqCR,GAArC,CAAhB;AAEAS,IAAAA,UAAU,GAAG,IAAIV,MAAM,CAACO,IAAP,CAAYI,UAAhB,EAAb;;AAEA,aAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,UAAI,CAACA,KAAK,CAACC,QAAP,IAAmB,CAACD,KAAK,CAACC,QAAN,CAAeC,QAAvC,EAAiD;AACjD,YAAMC,MAAM,GAAG,IAAIhB,MAAM,CAACO,IAAP,CAAYU,MAAhB,CAAuB;AACpChB,QAAAA,GADoC;AAEpCiB,QAAAA,QAAQ,EAAEL,KAAK,CAACC,QAAN,CAAeC;AAFW,OAAvB,CAAf;AAIAf,MAAAA,MAAM,CAACO,IAAP,CAAYY,KAAZ,CAAkBC,WAAlB,CAA8BJ,MAA9B,EAAsC,OAAtC,EAA+C,MAAM;AACnDN,QAAAA,UAAU,CAACW,UAAX,CAAsBR,KAAK,CAACS,IAAN,IAAc,EAApC;AACAZ,QAAAA,UAAU,CAACa,IAAX,CAAgBtB,GAAhB;AACD,OAHD;AAID;;AAEDK,IAAAA,OAAO,CAACkB,YAAR,CAAqBtB,OAArB,EAA8B,CAACuB,OAAD,EAAUC,MAAV,EAAkBC,UAAlB,KAAiC;AAC7D,UAAID,MAAM,IAAI1B,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBoB,mBAAnB,CAAuCC,EAArD,EAAyD;AACvD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvClB,UAAAA,YAAY,CAACa,OAAO,CAACK,CAAD,CAAR,CAAZ;AACD;;AAED1B,QAAAA,OAAO,CAACqB,OAAD,EAAUE,UAAV,CAAP;AACD,OAND,MAMO;AACLtB,QAAAA,MAAM,CAACoB,OAAD,EAAUC,MAAV,CAAN;AACD;AACF,KAVD;AAWD,GA5BM,CAAP;AA6BD;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,UAAT,CAAoBhC,MAApB,EAA4BC,GAA5B,EAAiCgC,OAAjC,EAA0C;AAC/C,SAAO,IAAI9B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,OAAO,GAAG,IAAIN,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBC,aAAvB,CAAqCR,GAArC,CAAhB;AAEA,UAAMC,OAAO,GAAG;AACd+B,MAAAA;AADc,KAAhB;AAIA3B,IAAAA,OAAO,CAAC0B,UAAR,CAAmB9B,OAAnB,EAA4B,CAACW,KAAD,EAAQa,MAAR,KAAmB;AAC7C,UAAIA,MAAM,KAAK1B,MAAM,CAACO,IAAP,CAAYC,MAAZ,CAAmBoB,mBAAnB,CAAuCC,EAAtD,EAA0D;AACxD,eAAOxB,MAAM,CAACqB,MAAD,CAAb;AACD,OAFD,MAEO;AACLtB,QAAAA,OAAO,CAACS,KAAD,CAAP;AACD;AACF,KAND;AAOD,GAdM,CAAP;AAeD","sourcesContent":["export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    infowindow = new google.maps.InfoWindow();\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location,\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infowindow.setContent(place.name || \"\");\n        infowindow.open(map);\n      });\n    }\n\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}"]},"metadata":{},"sourceType":"module"}