{"ast":null,"code":"export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    var infowindow = new google.maps.InfoWindow();\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i]);\n          }\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    });\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infowindow.setContent(place.name || \"\");\n        infowindow.open(map);\n      });\n    }\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\n\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      placeId\n    };\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    });\n  });\n}\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infowindow = new google.maps.InfoWindow();\n  const request = {\n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"]\n  };\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n\n  function createMarker(place) {\n    var infowindow = new google.maps.InfoWindow();\n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infowindow.setContent(place.name || \"\");\n      infowindow.open(map);\n    });\n  }\n}\nexport function geoLocateUser(google, map) {\n  const locationButton = document.createElement(\"button\");\n  locationButton.textContent = \"Pan to Current Location\";\n  locationButton.classList.add(\"custom-map-control-button\");\n  map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);\n  locationButton.addEventListener(\"click\", () => {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        infoWindow.setPosition(pos);\n        infoWindow.setContent(\"Your location\"); //infoWindow.open(map);\n\n        map.setCenter(pos);\n      }, () => {\n        handleLocationError(true, infoWindow, map.getCenter());\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  });\n\n  function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(browserHasGeolocation ? \"Error: The Geolocation service failed.\" : \"Error: Your browser doesn't support geolocation.\");\n    infoWindow.open(map);\n  }\n}","map":{"version":3,"sources":["/Users/bgee/Desktop/Web App Projects/mern-exercise-tracker/src/utils/googleApiHelpers.js"],"names":["searchNearby","google","map","request","Promise","resolve","reject","service","maps","places","PlacesService","infowindow","InfoWindow","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","i","length","createMarker","console","log","place","geometry","location","marker","Marker","position","event","addListener","setContent","name","open","getDetails","placeId","searchQuery","query","fields","findPlaceFromQuery","setCenter","geoLocateUser","locationButton","document","createElement","textContent","classList","add","controls","ControlPosition","TOP_CENTER","push","addEventListener","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","infoWindow","setPosition","handleLocationError","getCenter","browserHasGeolocation"],"mappings":"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","sourcesContent":["export function searchNearby(google, map, request) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n    var infowindow = new google.maps.InfoWindow();\n\n    service.nearbySearch(request, (results, status, pagination) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          if (i < 4) {\n            createMarker(results[i]);\n            console.log(results[i])\n          } \n\n        }\n\n        resolve(results, pagination);\n      } else {\n        reject(results, status);\n      }\n    })\n\n    function createMarker(place) {\n      if (!place.geometry || !place.geometry.location) return;\n      const marker = new google.maps.Marker({\n        map,\n        position: place.geometry.location,\n      });\n      google.maps.event.addListener(marker, \"click\", () => {\n        infowindow.setContent(place.name || \"\");\n        infowindow.open(map);\n      });\n    }\n\n  });\n}\n/*\n * getDetails\n *\n * Get details from the Google API about one specific place.\n */\nexport function getDetails(google, map, placeId) {\n  return new Promise((resolve, reject) => {\n    const service = new google.maps.places.PlacesService(map);\n\n    const request = {\n      placeId\n    }\n\n    service.getDetails(request, (place, status) => {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        return reject(status);\n      } else {\n        resolve(place);\n      }\n    })\n  })\n}\n\nexport function searchQuery(google, map) {\n  const service = new google.maps.places.PlacesService(map);\n  var infowindow = new google.maps.InfoWindow();\n\n  const request = {\n    query: \"Museum of Contemporary Art\",\n    fields: [\"name\"],\n  };\n\n  service.findPlaceFromQuery(request, (results, status) => {\n    if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n      for (let i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n      map.setCenter(results[0].geometry.location);\n    }\n  });\n\n  function createMarker(place) {\n    var infowindow = new google.maps.InfoWindow();\n    \n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location,\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infowindow.setContent(place.name || \"\");\n      infowindow.open(map);\n    });\n  }\n}\n\nexport function geoLocateUser(google, map) {\n\n  const locationButton = document.createElement(\"button\");\n  locationButton.textContent = \"Pan to Current Location\";\n  locationButton.classList.add(\"custom-map-control-button\");\n  map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);\n\n  locationButton.addEventListener(\"click\", () => {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          };\n          infoWindow.setPosition(pos);\n          infoWindow.setContent(\"Your location\");\n          //infoWindow.open(map);\n          map.setCenter(pos);\n        },\n        () => {\n          handleLocationError(true, infoWindow, map.getCenter());\n        }\n      );\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter());\n    }\n  });\n  function handleLocationError(browserHasGeolocation, infoWindow, pos) {\n    infoWindow.setPosition(pos);\n    infoWindow.setContent(\n      browserHasGeolocation\n        ? \"Error: The Geolocation service failed.\"\n        : \"Error: Your browser doesn't support geolocation.\"\n    );\n    infoWindow.open(map);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}